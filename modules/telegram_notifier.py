import os
import logging
import re
from datetime import datetime, timedelta
import telegram
from telegram.error import TelegramError
from sqlalchemy import func, desc, and_
from app import db
from models import Server, Domain, DomainGroup, ServerMetric, DomainMetric, ServerLog, ServerGroup, SystemSetting
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
CPU_THRESHOLD = 80  # % CPU
MEMORY_THRESHOLD = 80  # % –ø–∞–º—è—Ç–∏
DISK_THRESHOLD = 85  # % –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞

def mask_domain_name(domain_name):
    """
    –ú–∞—Å–∫–∏—Ä—É–µ—Ç —á–∞—Å—Ç—å –¥–æ–º–µ–Ω–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö.
    –ù–∞–ø—Ä–∏–º–µ—Ä, example.com –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ exa****.com
    
    –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —è–≤–ª—è–µ—Ç—Å—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ–π –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏!
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª–Ω—ã—Ö –¥–æ–º–µ–Ω–Ω—ã—Ö –∏–º–µ–Ω –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö –º–æ–∂–µ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—Ç—å —É–≥—Ä–æ–∑—É 
    –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, –ø–æ—Å–∫–æ–ª—å–∫—É —Ä–∞—Å–∫—Ä—ã–≤–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –¥–æ–º–µ–Ω—ã.
    
    Args:
        domain_name (str): –ü–æ–ª–Ω–æ–µ –∏–º—è –¥–æ–º–µ–Ω–∞
        
    Returns:
        str: –ó–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–º—è –¥–æ–º–µ–Ω–∞
    """
    if not domain_name:
        return "unknown"
    
    parts = domain_name.split('.')
    if len(parts) < 2:
        return domain_name
    
    # –ú–∞—Å–∫–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —á–∞—Å—Ç—å –¥–æ–º–µ–Ω–∞, –æ—Å—Ç–∞–≤–ª—è—è –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    main_part = parts[0]
    if len(main_part) <= 3:
        # –ï—Å–ª–∏ –∏–º—è –∫–æ—Ä–æ—Ç–∫–æ–µ, –æ—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π —Å–∏–º–≤–æ–ª
        masked_main = main_part[0] + '*' * (len(main_part) - 1)
    else:
        # –û—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–µ 3 —Å–∏–º–≤–æ–ª–∞ –∏ –∑–∞–º–µ–Ω—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∑–≤–µ–∑–¥–æ—á–∫–∞–º–∏
        masked_main = main_part[:3] + '*' * (len(main_part) - 3)
    
    # –°–æ–±–∏—Ä–∞–µ–º –∑–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–º—è
    parts[0] = masked_main
    return '.'.join(parts)

class TelegramNotifier:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram
    """
    
    @staticmethod
    async def get_current_time():
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –∫—Ä–∞—Å–∏–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        """
        return datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')
    
    @staticmethod
    def is_configured():
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ª–∏ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ ID —á–∞—Ç–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Å–∏—Å—Ç–µ–º—ã
        
        Returns:
            bool: True, –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã, –∏–Ω–∞—á–µ False
        """
        from app import app
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        # –ù–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ, –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º try-except
            
        try:
            telegram_token = SystemSetting.get_value('telegram_bot_token')
            telegram_chat_id = SystemSetting.get_value('telegram_chat_id')
            return telegram_token and telegram_chat_id
        except RuntimeError:
            # –ï—Å–ª–∏ —Ä–∞–±–æ—Ç–∞–µ–º –≤–Ω–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            return False
    
    @staticmethod
    async def send_message(text, parse_mode='HTML'):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
        
        Args:
            text (str): –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            parse_mode (str): –†–µ–∂–∏–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ (HTML, Markdown)
            
        Returns:
            bool: True, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ False
        """
        if not TelegramNotifier.is_configured():
            logger.warning("Telegram notifications are not configured")
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        try:
            telegram_token = SystemSetting.get_value('telegram_bot_token')
            telegram_chat_id = SystemSetting.get_value('telegram_chat_id')
        except Exception as e:
            logger.error(f"Failed to get Telegram settings from database: {str(e)}")
            return False
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ø—ã—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å —á–∞—Å—Ç–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        token_preview = telegram_token[:5] + "..." + telegram_token[-5:] if telegram_token else "None"
        chat_id_str = str(telegram_chat_id) if telegram_chat_id else "None"
        
        logger.info(f"Attempting to send Telegram message. Token: {token_preview}, Chat ID: {chat_id_str}")
        logger.info(f"Message length: {len(text)} chars, parse_mode: {parse_mode}")
        
        try:
            bot = telegram.Bot(token=telegram_token)
            result = await bot.send_message(
                chat_id=telegram_chat_id,
                text=text,
                parse_mode=parse_mode
            )
            logger.info(f"Telegram message sent successfully. Message ID: {result.message_id}")
            return True
        except TelegramError as e:
            logger.error(f"Failed to send Telegram notification: {str(e)}")
            logger.error(f"Chat ID type: {type(telegram_chat_id)}, Token length: {len(telegram_token) if telegram_token else 0}")
            return False
        except Exception as e:
            logger.error(f"Unexpected error sending Telegram message: {str(e)}")
            return False
    
    @staticmethod
    async def notify_server_status_change(server, old_status, new_status):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
        
        Args:
            server (Server): –û–±—ä–µ–∫—Ç —Å–µ—Ä–≤–µ—Ä–∞
            old_status (str): –ü—Ä–µ–¥—ã–¥—É—â–∏–π —Å—Ç–∞—Ç—É—Å
            new_status (str): –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
        """
        emoji = "üî¥" if new_status == 'error' else "üü¢"
        
        # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã, –≤ –∫–æ—Ç–æ—Ä—ã–µ –≤—Ö–æ–¥–∏—Ç —Å–µ—Ä–≤–µ—Ä
        groups_text = ""
        if server.groups:
            groups_text = "<b>–ì—Ä—É–ø–ø—ã —Å–µ—Ä–≤–µ—Ä–∞:</b>\n"
            for group in server.groups:
                desc = f" - {group.description}" if group.description else ""
                groups_text += f"‚Ä¢ <b>{group.name}</b>{desc}\n"
                
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –¥—Ä—É–≥–∏—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ
                other_servers = group.servers.filter(Server.id != server.id).all()
                if other_servers:
                    active_count = sum(1 for s in other_servers if s.status == 'active')
                    error_count = len(other_servers) - active_count
                    groups_text += f"  ‚úÖ {active_count} –∞–∫—Ç–∏–≤–Ω—ã—Ö, ‚ùå {error_count} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –≤ –≥—Ä—É–ø–ø–µ\n"
        
        message = f"{emoji} <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞</b>\n\n" \
                  f"–°–µ—Ä–≤–µ—Ä: <b>{server.name}</b>\n" \
                  f"–°—Ç–∞—Ç—É—Å: {old_status} ‚Üí <b>{new_status}</b>\n"
                  
        if groups_text:
            message += f"\n{groups_text}"
            
        message += f"–í—Ä–µ–º—è: {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')}"
        
        await TelegramNotifier.send_message(message)
    
    @staticmethod
    async def notify_external_server_status_change(server, old_status, new_status):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤–Ω–µ—à–Ω–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
        
        Args:
            server (ExternalServer): –û–±—ä–µ–∫—Ç –≤–Ω–µ—à–Ω–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
            old_status (str): –ü—Ä–µ–¥—ã–¥—É—â–∏–π —Å—Ç–∞—Ç—É—Å
            new_status (str): –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
        """
        emoji = "üî¥" if new_status == 'offline' else "üü¢" if new_status == 'online' else "‚ö™"
        
        message = f"{emoji} <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤–Ω–µ—à–Ω–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞</b>\n\n" \
                  f"–°–µ—Ä–≤–µ—Ä: <b>{server.name}</b>\n" \
                  f"IP: <code>{server.ip_address}</code>\n" \
                  f"–°—Ç–∞—Ç—É—Å: {old_status} ‚Üí <b>{new_status}</b>\n\n" \
                  f"–í—Ä–µ–º—è: {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')}"
        
        await TelegramNotifier.send_message(message)
    
    @staticmethod
    async def notify_domain_ns_status_change(domain, old_status, new_status):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ NS-–∑–∞–ø–∏—Å–µ–π –¥–æ–º–µ–Ω–∞
        
        Args:
            domain (Domain): –û–±—ä–µ–∫—Ç –¥–æ–º–µ–Ω–∞
            old_status (str): –ü—Ä–µ–¥—ã–¥—É—â–∏–π —Å—Ç–∞—Ç—É—Å
            new_status (str): –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
        """
        # –°–Ω–∞—á–∞–ª–∞ –º–∞—Å–∫–∏—Ä—É–µ–º –∏–º—è –¥–æ–º–µ–Ω–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        masked_domain_name = mask_domain_name(domain.name)
        
        # –î–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ª–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–º—è
        logger.info(f"Preparing NS status change notification for domain {masked_domain_name}")
        
        emoji = "üî¥" if new_status == 'mismatch' else "üü¢"
        
        # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã, –≤ –∫–æ—Ç–æ—Ä—ã–µ –≤—Ö–æ–¥–∏—Ç –¥–æ–º–µ–Ω
        groups_text = "<b>–ì—Ä—É–ø–ø—ã –¥–æ–º–µ–Ω–∞:</b>\n"
        domain_groups = list(domain.groups)
        
        if not domain_groups:
            groups_text += "–î–æ–º–µ–Ω –Ω–µ –≤—Ö–æ–¥–∏—Ç –Ω–∏ –≤ –æ–¥–Ω—É –≥—Ä—É–ø–ø—É\n"
        else:
            for group in domain_groups:
                server_name = group.server.name if group.server else "–ù–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞"
                groups_text += f"‚Ä¢ <b>{group.name}</b> (—Å–µ—Ä–≤–µ—Ä: {server_name})\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥—Ä—É–≥–∏—Ö –¥–æ–º–µ–Ω–∞—Ö –≤ –≥—Ä—É–ø–ø–µ (–±–µ–∑ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –∏–º–µ–Ω!)
                other_domains = group.domains.filter(Domain.id != domain.id).all()
                if other_domains:
                    ok_count = sum(1 for d in other_domains if d.ns_status == 'ok')
                    error_count = sum(1 for d in other_domains if d.ns_status == 'mismatch')
                    pending_count = len(other_domains) - ok_count - error_count
                    
                    groups_text += f"  ‚úÖ {ok_count} –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö, " \
                                   f"‚ùå {error_count} —Å –æ—à–∏–±–∫–∞–º–∏, " \
                                   f"‚è≥ {pending_count} –æ–∂–∏–¥–∞—é—â–∏—Ö –¥–æ–º–µ–Ω–æ–≤ –≤ –≥—Ä—É–ø–ø–µ\n"
        
        # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–º—è, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
        # –ü—Ä–æ–±–ª–µ–º–∞ –±—ã–ª–∞ –≤ —Ç–æ–º, —á—Ç–æ –∏–Ω–æ–≥–¥–∞ –ø—Ä–∏ —Å—Ç–∞—Ç—É—Å–µ mismatch –∏–º—è –¥–æ–º–µ–Ω–∞ –Ω–µ –º–∞—Å–∫–∏—Ä–æ–≤–∞–ª–æ—Å—å
        if new_status == 'mismatch' or old_status == 'mismatch':
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è, —á—Ç–æ –∏–º—è –¥–æ–º–µ–Ω–∞ –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç –∑–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–æ
            masked_domain_name = mask_domain_name(domain.name)
            logger.info(f"Applying extra masking for domain with mismatch status: {masked_domain_name}")
        
        # –°–æ—Å—Ç–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Å –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º –¥–æ–º–µ–Ω–∞
        message = f"{emoji} <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ NS-–∑–∞–ø–∏—Å–µ–π –¥–æ–º–µ–Ω–∞</b>\n\n" \
                  f"–î–æ–º–µ–Ω: <b>{masked_domain_name}</b>\n" \
                  f"–°—Ç–∞—Ç—É—Å: {old_status} ‚Üí <b>{new_status}</b>\n\n" \
                  f"{groups_text}\n" \
                  f"–í—Ä–µ–º—è: {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')}"
        
        await TelegramNotifier.send_message(message)
    
    @staticmethod
    async def notify_server_high_load(server, metric):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        
        Args:
            server (Server): –û–±—ä–µ–∫—Ç —Å–µ—Ä–≤–µ—Ä–∞
            metric (ServerMetric): –ú–µ—Ç—Ä–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
        """
        alerts = []
        
        if metric.cpu_usage and metric.cpu_usage > CPU_THRESHOLD:
            alerts.append(f"CPU: {metric.cpu_usage:.1f}% (–ø–æ—Ä–æ–≥: {CPU_THRESHOLD}%)")
        
        if metric.memory_usage and metric.memory_usage > MEMORY_THRESHOLD:
            alerts.append(f"–ü–∞–º—è—Ç—å: {metric.memory_usage:.1f}% (–ø–æ—Ä–æ–≥: {MEMORY_THRESHOLD}%)")
        
        if metric.disk_usage and metric.disk_usage > DISK_THRESHOLD:
            alerts.append(f"–î–∏—Å–∫: {metric.disk_usage:.1f}% (–ø–æ—Ä–æ–≥: {DISK_THRESHOLD}%)")
        
        if not alerts:
            return  # –ù–µ—Ç –ø—Ä–µ–≤—ã—à–µ–Ω–∏–π –ø–æ—Ä–æ–≥–æ–≤
        
        # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã, –≤ –∫–æ—Ç–æ—Ä—ã–µ –≤—Ö–æ–¥–∏—Ç —Å–µ—Ä–≤–µ—Ä
        groups_text = ""
        if server.groups:
            groups_text = "<b>–ì—Ä—É–ø–ø—ã —Å–µ—Ä–≤–µ—Ä–∞:</b>\n"
            for group in server.groups:
                desc = f" - {group.description}" if group.description else ""
                groups_text += f"‚Ä¢ <b>{group.name}</b>{desc}\n"
                
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –¥—Ä—É–≥–∏—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ
                other_servers = group.servers.filter(Server.id != server.id).all()
                if other_servers:
                    active_count = sum(1 for s in other_servers if s.status == 'active')
                    error_count = len(other_servers) - active_count
                    groups_text += f"  ‚úÖ {active_count} –∞–∫—Ç–∏–≤–Ω—ã—Ö, ‚ùå {error_count} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –≤ –≥—Ä—É–ø–ø–µ\n"
        
        message = f"‚ö†Ô∏è <b>–í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä</b>\n\n" \
                  f"–°–µ—Ä–≤–µ—Ä: <b>{server.name}</b>\n" \
                  f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:\n- " + "\n- ".join(alerts) + "\n"
                  
        if groups_text:
            message += f"\n{groups_text}"
            
        message += f"\n–í—Ä–µ–º—è: {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')}"
        
        await TelegramNotifier.send_message(message)
    
    @staticmethod
    async def notify_server_payment_reminder(server):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞
        
        Args:
            server (Server): –û–±—ä–µ–∫—Ç —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        """
        if not server.payment_date:
            return
            
        days_left = (server.payment_date - datetime.now().date()).days
        emoji = "üí∏"
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∏–ª–ª–∏–Ω–≥–µ
        billing_info = []
        if server.billing_provider:
            billing_info.append(f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä: <b>{server.billing_provider}</b>")
        if server.billing_login:
            billing_info.append(f"–õ–æ–≥–∏–Ω: <b>{server.billing_login}</b>")
            
        billing_text = "\n".join(billing_info) if billing_info else "–î–∞–Ω–Ω—ã–µ –±–∏–ª–ª–∏–Ω–≥–∞ –Ω–µ —É–∫–∞–∑–∞–Ω—ã"
        
        # –î–µ—Ç–∞–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞
        server_groups = []
        if server.groups:
            for group in server.groups:
                server_groups.append(f"‚Ä¢ {group.name}")
        
        groups_text = "\n".join(server_groups) if server_groups else "–°–µ—Ä–≤–µ—Ä –Ω–µ –≤—Ö–æ–¥–∏—Ç –Ω–∏ –≤ –æ–¥–Ω—É –≥—Ä—É–ø–ø—É"
        
        message = f"{emoji} <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞</b>\n\n" \
                  f"–°–µ—Ä–≤–µ—Ä: <b>{server.name}</b>\n" \
                  f"–î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã: <b>{server.payment_date.strftime('%d.%m.%Y')}</b>\n" \
                  f"–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: <b>{days_left}</b>\n\n" \
                  f"<b>–î–∞–Ω–Ω—ã–µ –±–∏–ª–ª–∏–Ω–≥–∞:</b>\n{billing_text}\n\n" \
                  f"<b>–ì—Ä—É–ø–ø—ã —Å–µ—Ä–≤–µ—Ä–∞:</b>\n{groups_text}\n\n" \
                  f"–í—Ä–µ–º—è: {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')}"
        
        await TelegramNotifier.send_message(message)
        
        # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        server.payment_reminder_sent = True
        db.session.commit()
    
    @staticmethod
    async def check_server_payment_reminders():
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ —Å–µ—Ä–≤–µ—Ä–æ–≤
        """
        servers = Server.query.filter(Server.payment_date.isnot(None)).all()
        reminder_count = 0
        
        for server in servers:
            if server.check_payment_reminder_needed():
                await TelegramNotifier.notify_server_payment_reminder(server)
                reminder_count += 1
        
        return reminder_count
    
    @staticmethod
    async def send_daily_report():
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã
        """
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        yesterday = datetime.utcnow() - timedelta(days=1)
        
        # –°—Ç–∞—Ç—É—Å—ã —Å–µ—Ä–≤–µ—Ä–æ–≤
        servers = Server.query.all()
        total_servers = len(servers)
        active_servers = sum(1 for s in servers if s.status == 'active')
        inactive_servers = total_servers - active_servers
        
        # –°—Ç–∞—Ç—É—Å—ã –¥–æ–º–µ–Ω–æ–≤
        domains = Domain.query.filter(Domain.expected_nameservers.isnot(None)).all()
        total_domains = len(domains)
        ok_domains = sum(1 for d in domains if d.ns_status == 'ok')
        mismatch_domains = sum(1 for d in domains if d.ns_status == 'mismatch')
        pending_domains = total_domains - ok_domains - mismatch_domains
        
        # –î–∞–Ω–Ω—ã–µ –ø–æ –≥—Ä—É–ø–ø–∞–º —Å–µ—Ä–≤–µ—Ä–æ–≤
        server_groups = ServerGroup.query.all()
        server_groups_data = []
        
        for group in server_groups:
            servers_in_group = group.servers.all()
            total_in_group = len(servers_in_group)
            
            if total_in_group == 0:
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –≥—Ä—É–ø–ø—ã
            
            active_in_group = sum(1 for s in servers_in_group if s.status == 'active')
            
            server_groups_data.append({
                'name': group.name,
                'description': group.description,
                'total': total_in_group,
                'active': active_in_group,
                'inactive': total_in_group - active_in_group
            })
        
        # –î–∞–Ω–Ω—ã–µ –ø–æ –≥—Ä—É–ø–ø–∞–º –¥–æ–º–µ–Ω–æ–≤
        domain_groups = DomainGroup.query.all()
        groups_data = []
        
        for group in domain_groups:
            domains_in_group = group.domains.all()
            total_in_group = len(domains_in_group)
            
            if total_in_group == 0:
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –≥—Ä—É–ø–ø—ã
            
            ok_in_group = sum(1 for d in domains_in_group if d.ns_status == 'ok')
            mismatch_in_group = sum(1 for d in domains_in_group if d.ns_status == 'mismatch')
            
            server_name = group.server.name if group.server else "–ù–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞"
            
            groups_data.append({
                'name': group.name,
                'server': server_name,
                'total': total_in_group,
                'ok': ok_in_group,
                'mismatch': mismatch_in_group
            })
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ—Ç—Ä–∏–∫–∞–º —Å–µ—Ä–≤–µ—Ä–æ–≤
        server_metrics = {}
        for server in servers:
            if server.status != 'active':
                continue
                
            # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
            metrics = ServerMetric.query.filter(
                ServerMetric.server_id == server.id,
                ServerMetric.timestamp >= yesterday
            ).all()
            
            if not metrics:
                continue
                
            avg_cpu = sum(m.cpu_usage for m in metrics if m.cpu_usage) / len(metrics) if metrics else 0
            avg_memory = sum(m.memory_usage for m in metrics if m.memory_usage) / len(metrics) if metrics else 0
            avg_disk = sum(m.disk_usage for m in metrics if m.disk_usage) / len(metrics) if metrics else 0
            
            max_cpu = max((m.cpu_usage for m in metrics if m.cpu_usage), default=0)
            max_memory = max((m.memory_usage for m in metrics if m.memory_usage), default=0)
            max_disk = max((m.disk_usage for m in metrics if m.disk_usage), default=0)
            
            server_metrics[server.name] = {
                'avg_cpu': avg_cpu,
                'avg_memory': avg_memory,
                'avg_disk': avg_disk,
                'max_cpu': max_cpu,
                'max_memory': max_memory,
                'max_disk': max_disk
            }
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–æ–º–µ–Ω–∞–º —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º —Ç—Ä–∞—Ñ–∏–∫–æ–º
        # –°–æ–±–µ—Ä–µ–º –¥–∞–Ω–Ω—ã–µ, –Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–º–µ–Ω–∞ –¥–æ–º–µ–Ω–æ–≤
        from sqlalchemy import desc
        top_domains_by_traffic_raw = db.session.query(
            Domain.name,
            func.sum(DomainMetric.bandwidth_used).label('total_bandwidth'),
            func.sum(DomainMetric.requests_count).label('total_requests')
        ).join(DomainMetric).filter(
            DomainMetric.timestamp >= yesterday
        ).group_by(Domain.name).order_by(
            desc('total_bandwidth')
        ).limit(5).all()
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å –∑–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ –¥–æ–º–µ–Ω–æ–≤
        top_domains_by_traffic = []
        for domain_name, bandwidth, requests in top_domains_by_traffic_raw:
            masked_name = mask_domain_name(domain_name)
            top_domains_by_traffic.append((masked_name, bandwidth, requests))
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = f"üìä <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã</b>\n" \
                 f"<i>–∑–∞ –ø–µ—Ä–∏–æ–¥ {yesterday.strftime('%Y-%m-%d %H:%M')} ‚Äî {datetime.utcnow().strftime('%Y-%m-%d %H:%M')}</i>\n\n"
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–≤
        report += f"<b>–°–µ—Ä–≤–µ—Ä—ã:</b> {active_servers}/{total_servers} –∞–∫—Ç–∏–≤–Ω—ã\n"
        if inactive_servers > 0:
            report += "‚ùå <b>–ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã:</b>\n"
            for server in servers:
                if server.status != 'active':
                    report += f"- {server.name}\n"
        report += "\n"
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–º–µ–Ω–æ–≤
        report += f"<b>–î–æ–º–µ–Ω—ã:</b> {ok_domains}/{total_domains} —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n"
        if mismatch_domains > 0:
            report += f"‚ö†Ô∏è –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ NS: {mismatch_domains}\n"
            # –ù–µ –≤–∫–ª—é—á–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∏–º–µ–Ω–∞ –¥–æ–º–µ–Ω–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏ –∏–∑ —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        if pending_domains > 0:
            report += f"‚è≥ –û–∂–∏–¥–∞—é—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: {pending_domains}\n"
        report += "\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥—Ä—É–ø–ø–∞–º —Å–µ—Ä–≤–µ—Ä–æ–≤
        if server_groups_data:
            report += "<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥—Ä—É–ø–ø–∞–º —Å–µ—Ä–≤–µ—Ä–æ–≤:</b>\n"
            for group in server_groups_data:
                desc = f" - {group['description']}" if group['description'] else ""
                report += f"‚Ä¢ <b>{group['name']}</b>{desc}\n" \
                        f"  ‚úÖ {group['active']}/{group['total']} –∞–∫—Ç–∏–≤–Ω—ã\n" \
                        f"  ‚ùå {group['inactive']}/{group['total']} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã\n"
            report += "\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥—Ä—É–ø–ø–∞–º –¥–æ–º–µ–Ω–æ–≤
        if groups_data:
            report += "<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥—Ä—É–ø–ø–∞–º –¥–æ–º–µ–Ω–æ–≤:</b>\n"
            for group in groups_data:
                report += f"‚Ä¢ <b>{group['name']}</b> (—Å–µ—Ä–≤–µ—Ä: {group['server']})\n" \
                        f"  ‚úÖ {group['ok']}/{group['total']} —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n" \
                        f"  ‚ùå {group['mismatch']}/{group['total']} —Å –æ—à–∏–±–∫–∞–º–∏\n"
            report += "\n"
        
        # –ù–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ã
        if server_metrics:
            report += "<b>–ù–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ã –∑–∞ 24 —á–∞—Å–∞:</b>\n"
            for server_name, metrics in server_metrics.items():
                report += f"‚Ä¢ <b>{server_name}</b>\n" \
                        f"  CPU: —Å—Ä. {metrics['avg_cpu']:.1f}%, –º–∞–∫—Å. {metrics['max_cpu']:.1f}%\n" \
                        f"  –ü–∞–º—è—Ç—å: —Å—Ä. {metrics['avg_memory']:.1f}%, –º–∞–∫—Å. {metrics['max_memory']:.1f}%\n" \
                        f"  –î–∏—Å–∫: —Å—Ä. {metrics['avg_disk']:.1f}%, –º–∞–∫—Å. {metrics['max_disk']:.1f}%\n"
            report += "\n"
        
        # –£–±—Ä–∞–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¢–æ–ø-5 –¥–æ–º–µ–Ω–æ–≤ –ø–æ —Ç—Ä–∞—Ñ–∏–∫—É –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é –∫–ª–∏–µ–Ω—Ç–∞
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
        await TelegramNotifier.send_message(report)